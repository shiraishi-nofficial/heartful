type LiveProfile
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "performerUsername"
        provider: userPools
        operations: [read, create, update]
      }
      { allow: private, provider: userPools, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  id: ID!
  performerUsername: String!
  starttime: Int!
  duration: Int!
  type: String! @index(name: "byType", queryField: "liveProfilesByType", sortKeyFields: ["starttime"]) # live only  
  performerPassCode: Int!  # 6桁
  audiencePassCode: Int!  # 6桁
  kind: String!  # chat, audio, video
  isUnpublished: Boolean!
  sessionDuration: LiveSessionDuration @hasOne(fields: ["id"])
  screenShareDuration: ScreenShareDuration @hasOne(fields: ["id"])
  createdAt: AWSDateTime
}

type ChatLog
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "username"
        provider: userPools
        operations: [read, create, update]
      }
      { allow: private, provider: userPools, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  id: ID
  role: String!  # 'performer' or 'audience'
  liveId: ID! @index(name: "byLive", queryField: "chatLogsByLive", sortKeyFields: ["createdAt"])
  type: String!  # chatが入る
  kind: String!  #'text' or 'image'
  content: String!
  createdAt: AWSDateTime
}

type LiveSessionDuration
  @model
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  liveId: ID! @primaryKey
  duration: Int!
  createdAt: AWSDateTime
}

type ScreenShareDuration
  @model
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, read, update] }
      { allow: public, provider: iam, operations: [create, read, update] }
    ]
  ) {
  liveId: ID! @primaryKey
  duration: Int!
  createdAt: AWSDateTime
}

type ChatTemplate
  @model
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID
  content: String!
  weight: Int!
}